#%RAML 1.0
title: ims_specs
description: The main specs for my bachelor projects API
version: v1
mediaType: 
  - application/json

types: 
  User: !include types/userType.raml
  UserBase: !include types/userBaseType.raml
  Item: !include types/itemType.raml
  ItemBase: !include types/itemBaseType.raml
  Collection: !include types/collectionType.raml
  CollectionBase: !include types/collectionBaseType.raml
  UserCredentials: !include types/userCredentials.raml
  AuthUserType: !include types/authUserType.raml

/users:
  get:
    description: Get a list of all users
    responses:
      200:
        body:
          type: User[]

  post:
    description: Create a new user
    body:
      application/json:
        type: UserBase
    responses:
      201:
        description: User created successfully
        body:
          application/json:
            type: UserBase
      400:
        description: Invalid user data provided
      409:
        description: A conflic happend with the request (mysql)

  /{userId}:
    uriParameters:
      userId: 
        description: The id of the user
        type: integer
        required: true
        
    get:
      description: Get a specific user by its ID
      responses:
        200:
          body:
            type: User
        404:
          body:
            application/json:
              example:
                error: "User not found"

    put:
      description: Update an existing user
      body:
        type: User
      responses:
        200:
          description: User successfully updated
        404:
          description: User not found

    delete:
      description: Delete a user by ID
      responses:
        204:
          description: User successfully deleted
        404:
          description: User not found

/collections:
  get:
    description: Get a list of all collections
    responses:
      200:
        body:
          type: Collection[]

  /{collectionId}:
    uriParameters:
      collectionId:
        description: The ID of the collection
        type: integer
        required: true

    get:
      description: Get a specific collection by ID
      responses:
        200:
          body:
            type: Collection
        404:
          description: Collection not found

    delete:
      description: Delete a collection by ID
      responses:
        204:
          description: Collection successfully deleted
        404:
          description: Collection not found

  /{collectionId}/items:
    uriParameters:
        collectionId:
          description: The ID of the collection
          type: integer
          required: true
    get:
      description: Get a specific collection by ID along with all related items
      responses:
        200:
          description: Returns the collection with all related items
          body:
            application/json:
              type: Collection
        404:
          description: Collection not found
  /new:

/items:
  get:
    description: Get a list of all items
    responses:
      200:
        body:
          type: Item[]
  post:
    description: Create a new item in a collection
    queryParameters:
      collectionId:
        description: The ID of the collection to which the item belongs
        type: integer
        required: true
    body:
      application/json:
        type: ItemBase
    responses:
      201:
        description: Item created successfully
        body:
          application/json:
            type: ItemBase
      400:
        description: Invalid item data provided

  /{itemId}:
    uriParameters:
      itemId:
        description: The id of the item
        type: integer
        required: true

    get:
      description: Get a specific item by ID
      responses:
        200:
          body:
            type: Item
        404:
          description: Item not found

    put:
      description: Update an existing item
      body:
        type: Item
      responses:
        200:
          description: Item successfully updated
        404:
          description: Item not found

    delete:
      description: Delete an item by ID
      responses:
        204:
          description: Item successfully deleted
        404:
          description: Item not found
/auth:
  /login:
    post:
      description: Authenticates a user based on username and password and returns user details along with a JWT token.
      body:
        application/json:
          type: UserCredentials
      responses:
        200:
          body:
            application/json:
              type: AuthUserType
              description: Authentication successful, returns user details and token.
        401:
          description: Unauthorized, invalid username or password.
        500:
          description: Internal server error, could be due to server faults or misconfigurations.
        




